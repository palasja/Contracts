@page "/ServiceInfo"

@inject IServiceInfoRepository serviceInfoService

@if (AllService == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="row">
    <div class="col col-3 m-3">
        <button class="btn btn-light m-3" @onclick="() => newServiceCost.Show()">Добавить</button>
    </div>
    <div class="col col-3">
        <select class="form-select form-select-sm w-100" @onchange="FiltredByYaer">
            @foreach (var year in Years)
            {
                <option>@year</option>
            }
        </select>
    </div>
</div>
<NewServiceCost @ref="newServiceCost" Title="Добавить сотимость для года" onCancel="() => newServiceCost.Hide()" />
    if (AllService.Count == 0)
    {
        <div class="row">
            <div class="col col-3 m-3">
                <p><em>Для текущего года нет стоимости</em></p>
            </div>
        </div>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Наименование</th>
                    @*                <th>Осн место\Сервер</th>
                        <th>Доп. место\Раб. место</th>*@
                    <th>Описание</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var serviceInfo in AllService)
                {
                    <tr>
                        <td> @serviceInfo.Id</td>
                        <td> @serviceInfo.ServiceTypeName</td>
                        @*                    <td> @serviceInfo.MainCost</td>
                            <td> @serviceInfo.AdditionalCost</td>*@
                        <td>@serviceInfo.ServiceTypeDescription</td>
                    </tr>
                }
            </tbody>
        </table>

    }
}

@code {
    NewServiceCost newServiceCost;
    List<ServiceInfoDTO> AllService;
    int[] Years;

    protected override async Task OnInitializedAsync()
    {
        AllService = await serviceInfoService.GetCostByYear();
        Years = await serviceInfoService.GetServiceYears();

    }
    async void FiltredByYaer(ChangeEventArgs e)
    {
        int year = int.Parse(e.Value.ToString());
        AllService = await serviceInfoService.GetCostByYear(year);
        Console.WriteLine(AllService.Count);
    }
}
